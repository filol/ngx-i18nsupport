/**
 * Interface to read and save file like objects from a backend system.
 */
import {Observable} from 'rxjs';
import {IFile} from './i-file.js';
import {IFileAccessConfiguration} from './i-file-access-configuration.js';
import {IFileDescription} from './i-file-description.js';
import {SerializationService} from '../../model/serialization.service';

/**
 * Data needed to save a file.
 */
export interface ICommitData {
    message: string;
    override?: boolean; // if file to save exists and this is false, an error occures
}

// changed: if existing file was changed after the initial load
// unchanged: if existing file was not changed after the initial load
// exists_not: if file does not exist
export enum FileStatus {
    CHANGED = 'CHANGED',
    UNCHANGED = 'UNCHANGED',
    'EXISTS_NOT' = 'EXISTS_NOT'
}

export interface IFileStats {
    status: FileStatus;
}

export interface IFileAccessService {

    /**
     * Load a file from the backend system.
     * @param description backend dependent description of the file to load.
     * @return Observable of the loaded file or a directory description.
     */
    load(description: IFileDescription): Observable<IFile|IFileDescription>;

    /**
     * Save a file in the backend.
     * @param file file loaded from the same backend.
     * @param commitData additional data needed to store it in the backend.
     * @return saved file if successful.
     */
    save(file: IFile, commitData?: ICommitData): Observable<IFile>;

    /**
     * Get some infos about a file.
     * @param file file (existing or not)
     */
    stats(file: IFile): Observable<IFileStats>;

    /**
     * Serialize a configuration to store it.
     * @param configuration configuration to be serialized.
     * @param serializationService service to be used.
     * @return serialized form that can be deserialized.
     */
    serialize(serializationService: SerializationService, configuration: IFileAccessConfiguration): string;

    /**
     * Create a configuration from a stored string (generated by serialize()).
     * @param serializationService service to be used.
     * @param serialzedConfiguration stored configuration string
     * @return deserialized version.
     */
    deserialize(serializationService: SerializationService, serialzedConfiguration: string): IFileAccessConfiguration;
}
